<?xml version="1.0" encoding="UTF-8"?>
<!--
	Anchor Keys
	===
	Enables the use of keyboard up/down/left/right and page up/page down
	keys to navigate between anchors on a page. Also contains a list of
	anchor names to ignore during navigation.
	
	@name Anchor Keys
	@author Andrew Hushbeck
	@website http://widgets.mu
-->
<HTMLWidget name="Anchor Keys" formatNumber="2" localization="none"
		creator="Andrew Hushbeck" defaultWidth="35" defaultHeight="35"
		isResizable="false">
	
	<parameters>
		<info label="Enable anchor navigation using:" />
		<bool name="arrowKeys" label="Arrow Keys" defaultValue="true">
			<trueVal value="true"/>
			<falseVal value="false"/>
		</bool>
		<bool name="pageKeys" label="Page Up/Page Down" defaultValue="false">
			<trueVal value="true"/>
			<falseVal value="false"/>
		</bool>
		<list name="order" label="Anchor Order" defaultValue="vert">
			<value name="vert" label="Top to Bottom"/>
			<value name="horiz" label="Left to Right"/>
			<value name="both" label="Top Left to Bottom Right"/>
		</list>
		<text name="ignored" label="Ignored Anchor Names" defaultValue=" " />
		<separator/>
		<info label="Click Here for more info" linkURL="http://widgets.mu/se/AnchorKeys"/>
	</parameters>
	
	<!--
		All code is JS and relies on jQuery and some native Muse JS
		functions. Placing code just before </body>
	-->
	<bodyEndHTML>
<![CDATA[
<script type="text/javascript">
	(function () {
		// Convert anchor names the same way Muse does
		function convertAnchorNames(name) {
			return name.replace(/([A-Z])/g, function (a, c) {
				return c.toLowerCase();
			});
		}
		
		var anchors = $('a:not([href])'),
			ignoreList = "{param_ignored}".split(/\s*,\s*/),
			dir = "{param_order}";
		
		if( ignoreList && ignoreList.length && !(ignoreList.length == 1 && ignoreList[0] == '') ) {
			// We're ignoring some
			for(var i in ignoreList) {
				ignoreList[i] = convertAnchorNames(ignoreList[i]);
			}
			anchors = anchors.filter(function (i, el) {
				return ignoreList.indexOf(el.id) < 0 ? el : null;
			});
		}
		
		// Sort
		var sortFn;
		switch (dir){
			case "vert":
				// Sort items by vertical position top to bottom
				sortFn = function (a, b) {
					return $(a).offset().top - $(b).offset().top;
				};
				break;
			case "horiz":
				// Sort items by horizontal position left to right
				sortFn = function (a, b) {
					return $(a).offset().left - $(b).offset().left;
				};
				break;
			default:
				// Sort items from top left to bottom right
				sortFn = function (a, b) {
					if($(a).offset().top == $(b).offset().top)
						return $(a).offset().left - $(b).offset().left;
					return $(a).offset().top - $(b).offset().top;
				};
		}
		anchors.sort(sortFn);
		
		// Use the current window scroll position to figure out what
		// anchors we are currently between, so we can determine
		// next and previous anchors in our list
		function findCurrentAnchor() {
			if(dir == 'horiz') {
				var currAt = $(window).scrollLeft(),
					compVal = 'left';
				
			} else {
				var currAt = $(window).scrollTop(),
					compVal = 'top';
			}
			
			var pos = 0;
			anchors.each(function (i, el) {
				if( Math.floor($(el).offset()[compVal]) > currAt) {
					return false;
				}
				pos = i;
			});
			
			return pos;
		}
		
		// Trigger Muse anchor navigation to give anchor
		function navigateTo(anchor) {
			var a = document.createElement('a');
			a.href = '#' + anchor.id;
			a.className = 'anim_swing';
			// This is the native Muse function for navigating
			// to a hyperlink. THIS IS UNSAFE, but most reliable
			// way to navigate consistently
			Muse.Utils.processHyperlink(a);
			return false;
		}
		
		// Go to the next anchor
		function nextAnchor() {
			var i = findCurrentAnchor() + 1;
			if(i < anchors.length) {
				return navigateTo(anchors[i]);
			}
		}
		
		// Go to the previous anchor
		function prevAnchor() {
			var i = findCurrentAnchor() - 1;
			if(i >= 0) {
				return navigateTo(anchors[i]);
			}
		}
		
		// Handle all keydown events. Currently no focus
		// distinctions are made
		$(document.documentElement).keydown(function (e) {
				var code = e.keyCode;
				
				if({param_arrowKeys}) {
					switch(code){
						case 38: // up
						case 37: // left
							return prevAnchor();
						case 40: // down
						case 39: // right
							return nextAnchor();
					}
				}
				if({param_pageKeys}) {
					switch(code){
						case 34: // page down
							return nextAnchor();
						case 33: // page up
							return prevAnchor();
					}
				}
			});
		
	})();
</script>
]]>
	</bodyEndHTML>
</HTMLWidget>